Option Explicit

Private Declare PtrSafe Function VarPtrArray Lib "VBE7" Alias "VarPtr" _
        (ByRef Var() As Any) As LongPtr

Private Declare PtrSafe Sub CopyMemoryI Lib "kernel32.dll" Alias "RtlMoveMemory" _
        (ByVal dst As LongPtr, ByVal src As LongPtr, ByVal Length As Long)

Private Declare PtrSafe Sub CopyMemoryII Lib "kernel32.dll" Alias "RtlMoveMemory" _
        (ByRef dst As SAFEARRAY, ByVal src As LongPtr, ByVal Length As Long)

Private Declare PtrSafe Function GetAsyncKeyState Lib "user32" _
        (ByVal vKey As Long) As Boolean

Private Type SAFEARRAY_BOUND
    cElements    As Long
    lLbound      As Long
End Type

Private Type SAFEARRAY
    cDims        As Integer
    fFeatures    As Integer
    cbElements   As Long
    cLocks       As Long
    pvData       As LongPtr
    rgsabound(0) As SAFEARRAY_BOUND
End Type

Private Type SnakePart
    Column       As Long
    Row          As Long
End Type

Private Function ArrayPush(ByRef ArrayOriginal() As SnakePart, ByRef ElementToAdd As SnakePart) As SnakePart()
Dim NewLength      As Long
Dim CopiedBytes    As Long
Dim NewBytes       As Long

    NewLength = UBound(ArrayOriginal) + 1
    ReDim ArrayPush(NewLength)

    CopiedBytes = NewLength * SNAKEPART_BYTELENGTH
    NewBytes = SNAKEPART_BYTELENGTH

    CopyMemoryI ArrayElementGetPointer(ArrayPush, 0, SNAKEPART_BYTELENGTH), ArrayElementGetPointer(ArrayOriginal, 0, SNAKEPART_BYTELENGTH), CopiedBytes
    CopyMemoryI ArrayElementGetPointer(ArrayPush, NewLength, SNAKEPART_BYTELENGTH), VarPtr(ElementToAdd), NewBytes
End Function

Private Function ArrayPop(ByRef ArrayOriginal() As SnakePart) As SnakePart()
Dim NewLength      As Long
Dim CopiedBytes    As Long

    NewLength = UBound(ArrayOriginal) - 1
    ReDim ArrayPop(NewLength)

    CopiedBytes = UBound(ArrayOriginal) * SNAKEPART_BYTELENGTH

    CopyMemoryI ArrayElementGetPointer(ArrayPop, 0, SNAKEPART_BYTELENGTH), ArrayElementGetPointer(ArrayOriginal(), 0, SNAKEPART_BYTELENGTH), CopiedBytes
End Function

Private Function ArrayShift(ByRef ArrayOriginal() As SnakePart, ByRef ElementToAdd As SnakePart) As SnakePart()
Dim NewLength      As Long
Dim CopiedBytes    As Long
Dim NewBytes       As Long

    NewLength = UBound(ArrayOriginal) + 1
    ReDim ArrayShift(NewLength)

    CopiedBytes = NewLength * SNAKEPART_BYTELENGTH
    NewBytes = SNAKEPART_BYTELENGTH

    CopyMemoryI ArrayElementGetPointer(ArrayShift, 1, SNAKEPART_BYTELENGTH), ArrayElementGetPointer(ArrayOriginal, 0, SNAKEPART_BYTELENGTH), CopiedBytes
    CopyMemoryI ArrayElementGetPointer(ArrayShift, 0, SNAKEPART_BYTELENGTH), VarPtr(ElementToAdd), NewBytes
End Function

Private Function ArrayUnshift(ByRef ArrayOriginal() As SnakePart) As SnakePart()
Dim NewLength      As Long
Dim CopiedBytes    As Long

    NewLength = UBound(ArrayOriginal) - 1
    ReDim ArrayUnshift(NewLength)

    CopiedBytes = UBound(ArrayOriginal) * SNAKEPART_BYTELENGTH

    CopyMemoryI ArrayElementGetPointer(ArrayUnshift, 0, SNAKEPART_BYTELENGTH), ArrayElementGetPointer(ArrayOriginal, 1, SNAKEPART_BYTELENGTH), CopiedBytes
End Function

Private Function ArrayElementGetPointer(ByRef Arr() As SnakePart, ByVal ElementIndex As Long, ByVal ElementByteLength As Long) As LongPtr
Dim ptrToArrayVar  As LongPtr
Dim ptrToSafeArray As LongPtr
Dim ptrToArrayData As LongPtr
Dim ptrCursor      As LongPtr
Dim uSAFEARRAY     As SAFEARRAY

    ' Get Pointer To Array *Variable*
    ptrToArrayVar = VarPtrArray(Arr)
    ' Get Pointer To Array Variable *SAFEARRAY* By Directly Reading Array Variable
    CopyMemoryI VarPtr(ptrToSafeArray), ptrToArrayVar, 8
    ' Read The SAFEARRAY Structure
    CopyMemoryII uSAFEARRAY, ptrToSafeArray, LenB(uSAFEARRAY)
    ' Get Pointer To Array Data
    ptrToArrayData = uSAFEARRAY.pvData
    ' Get Pointer To Array Element
    ptrCursor = ptrToArrayData + (ElementIndex * ElementByteLength)
    ArrayElementGetPointer = ptrCursor
End Function
